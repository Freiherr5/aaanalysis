"""
This is a script for creating template Wrapper and Toll classes used in the AAanalysis library
"""
from abc import ABC, abstractmethod, abstractproperty


class Tool(ABC):
    """Tool class for specialized tasks.

    This class provides a framework for standalone utilities focusing on specialized tasks,
    such as feature engineering or data pre-processing. The `.run` method is intended for
    executing the main logic of the tool, while `.eval` is for evaluation of the tool's output.

    Subclasses should provide concrete implementations for the `run` and `eval` methods.
    """

    @abstractmethod
    def run(self):
        """Execute the main logic of the tool.

        This method should be overridden by subclasses to implement the main functionality.

        Raises:
        NotImplementedError: If the method is not implemented by the subclass.
        """
        raise NotImplementedError

    @abstractmethod
    def eval(self):
        """Evaluate the output generated by the tool.

        This method should be overridden by subclasses to implement evaluation logic.

        Raises:
        NotImplementedError: If the method is not implemented by the subclass.
        """
        raise NotImplementedError


class Wrapper(ABC):
    """Wrapper class for extending models from libraries like scikit-learn.

    This class is designed to contain `.fit` and `.eval` methods for model
    training and evaluation, respectively. It also contains abstract properties
    for `model` and `model_kwargs` which should be implemented in subclasses.
    """

    @abstractproperty
    def model(self):
        """Get the underlying model instance.

        This property should be overridden by subclasses.

        Raises:
        NotImplementedError: If the property is not implemented by the subclass.
        """
        raise NotImplementedError

    @abstractproperty
    def model_kwargs(self):
        """Get keyword arguments for the model.

        This property should be overridden by subclasses.

        Raises:
        NotImplementedError: If the property is not implemented by the subclass.
        """
        raise NotImplementedError

    @abstractmethod
    def fit(self):
        """Fit the model with data.

        This method should be overridden by subclasses to implement the model fitting.

        Raises:
        NotImplementedError: If the method is not implemented by the subclass.
        """
        raise NotImplementedError

    @abstractmethod
    def eval(self):
        """Evaluate the model.

        This method should be overridden by subclasses to implement model evaluation.

        Raises:
        NotImplementedError: If the method is not implemented by the subclass.
        """
        raise NotImplementedError
